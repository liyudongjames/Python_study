# 正则表达式
# 在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字
# 要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），
# 用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：
# 来看一个复杂的例子：\d{3}\s+\d{3,8}。
# 我们来从左到右解读一下：
# \d{3}表示匹配3个数字，例如'010'；
# \s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
# \d{3,8}表示3-8个数字，例如'1234567'。
# 如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}。
# 要做更精确地匹配，可以用[]表示范围，比如：
# [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
# [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
# [a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
# [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
# A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
# ^表示行的开头，^\d表示必须以数字开头。
# $表示行的结束，\d$表示必须以数字结束。
# 你可能注意到了，py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。
import re

what = re.match(r'^\d{3}\-\d{3,8}$', '010-12345')
what1 = re.match(r'^\d{3}\-\d{3,8}$', '010 12345')
print(what)
print(what1)


space_str = 'a b   d'


# 去除空格不用正则表达式
def remove_space():
    space_list = space_str.split(' ')
    print(space_list)


# 运用正则表达式去除空格
def remove_space_with_re():
    space_list = re.split('\s+', space_str)
    print(space_list)


remove_space()
remove_space_with_re()